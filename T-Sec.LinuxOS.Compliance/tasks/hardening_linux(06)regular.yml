---
# ------------------------------------------------------------------------
# Telekom Security - Compliance Automation - Hardening
# Linux OS for Servers (3.65)
# Tasks: 6.	Regular Compliance Checks
# ------------------------------------------------------------------------
- name: req-061 No legacy + entries must exist in files passwd, shadows and group.
  lineinfile:
    dest: '{{ item }}'
    regexp: '^\+:'
    state: absent
  with_items:
    - '/etc/passwd'
    - '/etc/shadow'
    - '/etc/group'

- name: req-62.1 Check Permissions on User Home Directories (gather users)
  shell: /bin/egrep -v '(root|halt|sync|shutdown|false)' /etc/passwd | /usr/bin/awk -F':' '($7 != "/usr/sbin/nologin") { print $6 }'
  register: home_users
  changed_when: False
  failed_when: False
  check_mode: no

- name: req-62.2 Check Permissions on User Home Directories
  file:
      path: "{{ item }}"
      mode: '0750'
      state: directory
  with_items: "{{ home_users.stdout_lines }}"
  when: modify_user_homes|d(True)

- name: req-63 Default group for the root account must be GID 0.
  shell: "grep -c ^root:x:0:0:root: /etc/passwd"
  register: root_default_gid
  failed_when: root_default_gid.stdout != '1'
  changed_when: False
  check_mode: no


- name: req-64 Root must be the only UID 0 account.
  shell: "cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'"
  register: root_only_uid_0
  failed_when: root_only_uid_0.stdout != 'root'
  changed_when: False
  check_mode: no

- name: req-65.1 All groups in /etc/passwd must exist in /etc/group (Gather)
  shell: "cut -s -d: -f4 /etc/passwd | sort -u"
  register: groups_in_passwd
  changed_when: False
  check_mode: no

- name: req-65.1 All groups in /etc/passwd must exist in /etc/group (Gather)
  shell: "cut -s -d: -f3 /etc/group | sort -u"
  register: all_groups
  changed_when: False
  check_mode: no

- name: req-65.1 All groups in /etc/passwd must exist in /etc/group (Check)
  fail:
    msg: "Group ID {{ item }} not found in /etc/group"
  when:
    - item not in all_groups.stdout.split('\n')|d([])
  with_items:
    - "{{ groups_in_passwd.stdout.split('\n') }}"
  check_mode: no

- name: req-66.1 Check for Duplicate UIDs
  shell: cut -f3 -d':' /etc/passwd | sort | uniq -d
  register: uids_list
  failed_when: uids_list.stdout != ''
  changed_when: False
  check_mode: no

- name: req-66.2 Check for Duplicate GIDs
  shell: cut -f3 -d':' /etc/group | sort | uniq -d
  register: gids_list
  failed_when: gids_list.stdout != ''
  changed_when: False
  check_mode: no

- name: req-67.1 Check for Duplicate User Names
  shell: cut -f1 -d':' /etc/passwd | sort | uniq -d
  register: uids_list
  failed_when: uids_list.stdout != ''
  changed_when: False
  check_mode: no

- name: req-67.2 Check for Duplicate Group Names
  shell: cut -f1 -d':' /etc/group | sort | uniq -d
  register: uids_list
  failed_when: uids_list.stdout != ''
  changed_when: False
  check_mode: no

- name: req-68 The shadow group must be empty
  shell: grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group
  register: shadow_group_check
  failed_when: shadow_group_check.stdout != ''
  changed_when: False
  check_mode: no

# /var/lib can contain:
# - systemd DynamicUsers
# - docker volumes
- name: req-69.1 No files and directories without assigned user or group must exist.
  shell: >-
      find /
      {%- for dir in unassigned_user_whitelist_dir|d([])  %}
        -not -path "{{ dir }}/*"
      {%- endfor %} -nouser 2>/dev/null
  register: files_no_user
  failed_when:
    - files_no_user.stdout != ''
  changed_when: False
  check_mode: no
  no_log: "{{ long_output_protection|d(True) or files_no_user.stdout != '' }}"

- name: req-69.2 No files and directories without assigned user or group must exist.
  shell: >-
      find /
      {%- for dir in unassigned_group_whitelist_dir|d([])  %}
        -not -path "{{ dir }}/*"
      {%- endfor %} -nogroup 2>/dev/null
  register: files_no_group
  failed_when:
    - files_no_group.stdout != ''
    - "'/var/lib/private/systemd/timesync' not in files_no_user.split('\n')|d([])"
  changed_when: False
  check_mode: no
  no_log: "{{ long_output_protection|d(True) or files_no_user.stdout != '' }}"
